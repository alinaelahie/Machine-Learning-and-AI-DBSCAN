#import required libraries 
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_moons, make_blobs, make_circles
from sklearn.cluster import DBSCAN, KMeans, AgglomerativeClustering
from sklearn.preprocessing import StandardScaler

def plot_clusters(X, labels, title):
    plt.scatter(X[:, 0], X[:, 1], c=labels, cmap='viridis', edgecolor='k')
    plt.title(title)
    plt.xlabel('Feature 1')
    plt.ylabel('Feature 2')
    plt.show()

# create datasets
data_moons, _ = make_moons(n_samples=300, noise=0.05, random_state=42)
data_blobs, _ = make_blobs(n_samples=300, centers=3, cluster_std=[1.0, 2.5, 0.5], random_state=42)
data_circles, _ = make_circles(n_samples=300, factor=0.5, noise=0.05, random_state=42)

datasets = [("Moons", data_moons), ("Blobs", data_blobs), ("Circles", data_circles)]

for name, X in datasets:
    X = StandardScaler().fit_transform(X)  # Normalize data
    
    # apply clustering algorithms
    dbscan = DBSCAN(eps=0.2, min_samples=5).fit(X)
    kmeans = KMeans(n_clusters=3, random_state=42, n_init=10).fit(X)
    agglomerative = AgglomerativeClustering(n_clusters=3).fit(X)
    
    # plot results
    print(f"Results for {name} Dataset:")
    plot_clusters(X, dbscan.labels_, title=f"DBSCAN on {name}")
    plt.show(block=True)
    plot_clusters(X, kmeans.labels_, title=f"K-Means on {name}")
    plt.show(block=True)
    plot_clusters(X, agglomerative.labels_, title=f"Hierarchical Clustering on {name}")
    plt.show(block=True) #to stop plots from closing immediately

